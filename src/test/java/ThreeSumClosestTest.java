import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.assertEquals;

class ThreeSumClosestTest {
    ThreeSumClosest threeSumClosest = new ThreeSumClosest();

    static Stream<Arguments> generateData() {
        return Stream.of(
                Arguments.of(new int[]{-94, -92, 31, 60, -31, -5, 0, -48, -30, 96, -93, 47, 56, -45, -77, -56, -10, 43, 63, 90, -100, 65, -80, 94, 98, 65, -56, -45, -87, 78, 47, 99, 47, -64, 77, -70, 81, 76, 80, 36, 23, -99, -79, -91, 66, 95, -1, -1, 33, 24, -51, -86, 95, -58, -96, 84, 61, 97, -58, -37, 22, -68, 24, -4, -67, -67, 88, 82, -79, 56, -100, 58, -54, -32, -74, -68, 67, 18, -71, -48, 83, -21, -99, 51, -8, -16, 12, 34, -60, -44, -35, -62, 14, -59, -34, 89, -53, 53, -78, 94, 77, -61, -49, 20, -27, 8, 76, -96, -16, -6, 93, -33, -36, -62, -22, -67, -30, 19, 54, -20, -36, -8, -31, -67, 24, 31, 0, 28, 16, 17, -11, -69, -43, -53, 93, 44, -34, 73, -89, 45, -46, 63, 6, -49, 47, 93, 82, 33, -14, -20, 25, -1, -48, -56, 47, -49, 43, 4, -68, 37, 86, -6, -56, 91, -24, -43, 40, 40, -51, -58, -64, -56, 84, -22, -81, 32, 55, 32, 43, -13, -100, -15, 66, 61, 85, -81, 57, 20, 64, -57, -68, 8, -60, 65, 97, 3, 33, -68, 40, 83, -79, 38, 32, -41, 67, -72, -54, 22, 54, -49}, 121, 121),
                Arguments.of(new int[]{144,-835,897,678,-87,673,169,8,-338,-363,-213,824,616,-173,-36,425,-239,-881,544,-752,900,172,541,712,-774,-799,879,837,951,-89,305,988,-672,-203,-623,-652,-871,219,-97,232,939,-895,-397,670,537,-843,282,754,-750,181,100,-387,-286,923,249,-842,-588,271,-172,-786,397,-848,-736,-264,510,-845,-334,693,363,327,55,-464,-142,442,-327,-292,-964,443,585,-961,-604,724,-34,-21,454,-238,-615,975,816,-816,941,-921,-975,118,958,-679,640,-654,766,291,780,944,790,99,375,628,-351,650,-953,-178,163,47,-973,557,129,642,-107,543,472,318,567,738,815,-852,44,-650,657,-164,-901,35,878,651,447,-285,-337,-488,41,602,-495,-957,613,-124,-45,-166,-52,802,393,664,29,-941,298,965,648,864,-403,740,687,737,-380,-120,149,634,479,952,-879,427,-67,-550,431,201,-847,517,-78,-863,-687,733,786,-989,883,-709,221,-41,538,-648,979,-352,784,-467,946,752,-666,-734,-23,-297,629,122,175,154,-382,-976,-486,-530,-271,881,623,-539,776,-919,680,725,-651,-444,-181,-355,329,-855,932,933,404,473,267,-210,-206,-966,171,-639,-909,-66,-551,990,-466,792,-31,-504,-636,-449,512,-783,170,-898,-600,771,484,236,-282,699,1000,-560,-46,-993,-128,340,-324,-523,-400,-375,-459,-348,-168,-294,79,-221,972,203,714,417,486,-421,362,257,532,612,243,-905,187,715,-632,654,-577,338,-350,753,-540,227,-102,-415,148,-762,32,378,275,895,441,-343,588,-506,-103,-877,-257,-559,934,-991,256,314,460,511,-496,-990,388,945,835,976,191,-689,124,-515,-931,868,332,198,296,-891,828,11,-748,-261,-220,322,-875,402,183,-564,-129,93,40,700,-850,334,-948,534,-641,-768,503,-920,126,989,396,-328,892,797,-191,863,-691,888,-699,196,810,-936,67,-479,-524,850,-86,875,137,279,-592,-32,-159,30,-628,444,165,345,677,-667,750,-938,698,381,-603,272,-935,-726,76,624,216,-199,252,359,24,-932,269,315,872,760,-24,-481,490,-228,-733,-821,200,694,-184,814,-272,865,-342,-934,-232,-55,763,-833,981,155,86,599,-119,-48,-585,238,-267,630,514,899,184,391,48,-414,-769,83,22,301,-300,-766,-922,1,250,70,-593,770,286,-53,-487,470,-606,-755,-500,115,342,834,984,-3,889,480,-812,761,570,-876,350,-861,-856,796,-611,722,-511,371,-775,65,671,98,-570,152,-782,274,-141,-452,508,-605,-170,281,-599,-851,437,-900,-944,-226,-202,415,-229,-149,422,-503,529,-602,-194,-446,96,-497,496,-531,-501,153,333,-4,-130,-211,321,-377,527,-708,-792,-222,-725,-357,-278,-68,858,765,58,-82,-665,762,914,-741,823,-992,308,-682,682,-311,-581,416,-19,-509,-918,-988,-868,-903,237,95,-182,-640,-269,-246,-635,-110,78,-939,-430,407,806,-385,908,819,833,669,667,-669,857,244,515,781,217,-738,-442,63,578,-579,-455,-174,-127,-179,-673,-465,658,430,-580,-158,280,-548,-637}, 851, 851),
                Arguments.of(new int[]{-735,-792,-990,-994,-339,-63,-358,311,-488,925,-611,-750,-973,-465,-904,469,-905,-600,270,-806,233,379,-297,-451,-448,-894,-797,-632,-85,942,-851,701,338,-208,-740,528,378,-502,-226,-521,-741,442,-975,618,-29,-917,39,-392,-995,607,354,-689,-883,637,438,-700,863,755,-463,722,-561,9,-983,-452,851,-89,-498,170,723,-690,-494,-49,678,192,184,241,328,130,321,623,-688,958,94,-67,-773,810,-520,567,-7,-287,44,-630,382,148,97,21,-495,275,-219,781,580,799,-736,509,-1,329,611,-531,-757,780,555,666,-744,824,391,884,430,-574,253,349,47,525,938,-303,-840,337,495,728,892,-942,-747,876,445,-866,-837,-501,-804,-194,687,-296,976,172,671,-509,37,801,-953,409,271,169,988,-491,-571,773,-748,-649,-343,-309,865,984,-95,298,-15,-144,8,201,-957,496,145,-864,-746,307,770,369,-853,243,375,-150,-796,-670,627,916,504,-389,-8,415,-213,606,920,-958,653,-821,929,517,594,-74,-843,969,-902,-759,-55,-951,-848,-895,550,-675,-947,252,559,-496,-704,318,848,-989,102,-375,-56,269,-16,592,31,951,819,-305,-532,263,81,897,235,432,-444,-446,-820,214,262,-518,-879,882,581,-614,163,901,547,573,291,987,186,-682,885,323,-623,-325,462,-643,-348,-726,213,-238,180,-378,966,997,663,661,-636,629,749,-91,365,890,-47,-745,776,751,-944,554,991,499,-505,-870,-174,247,793,-373,372,-279,36,-982,-674,856,-229,-96,-225,850,244,42,101,-863,788,109,312,-221,-372,346,-897,656,-765,979,936,731,57,361,-760,-475,-1000,-218,-855,735,935,911,736,-191,433,-549,98,-933,992,-974,449,395,742,465,-490,-295,833,-409,-201,-159,716,-590,-605,193,-548,-956,-127,-370,-686,-763,-615,117,-663,-519,740,110,-923,237,49,313,520,-175,-422,251,288,738,74,-186,-868,533,-880,503,17,941,-33,-404,-648,6,-38,-572,421,113,-407,-83,-277,173,-619,-427,538,-731,796,-274,595,360,655,828,-77,-977,-228,40,-832,721,-467,427,317,688,734,-762,141,332,-142,853,135,-912,-300,910,893,-399,838,282,431,-233,-884,-334,950,703,-185,750,-139,-857,-800,-24,157,-423,-834,210,-147,158,147,-527,-714,384,-111,973,857,-997,-135,-244,330,726,355,498,-124,899,820,440,717,383,-676,-153,-540,268,-828,-266,-312,939,707,690,562,150,807,778,-534,930,-359,518,-381,974,467,-569,220,-911,570,-187,295,483,90,-355,628,-629,-709,693,-789,-401,805,667,691,921,205,934,725,-948,747,931,990,-766,-668,-860,985,-354,66,-44,-907,-992,24,-565,380,-900,670,-76,-403,-793,-683,-101,-959,25,909,-622,-283,411,-265,889,71,207,821,695,-173,362,572,-784,-890,-930,-252,512,898,862,-294,112,686,-72,-721,392,-771,-464,507,-555,-94,-939,895,-54,289,34,-515,-558,-679,38,860,-856,514,888,739,-259,-92,134,-298,501,922,-932,-293,-357,211,669,-146,-637,-23,404,571,-557,359,-2,123,-379,645,-626,-282,425,-99,-393,250,387,-586,745,-183,-737,-435,844,542,-172,2,308,126,-84,-795,-134,10,754,-442,-510,729,560,912,348,706,933,829,913,854,-665,-457,437,-805,-468,-545,762,-867,0,160,27,441,-472,785,444,12,-256,500,-482,-640,-164,-360,-950,727,-48,928,647,-102,-680,-245,-946,-780,64,458,826,825,-801,677,-810,-695,475,231,-62,-807,-701,-39,-842,-827,-813,-764,284,-104,-522,779,127,-340,-556,334,-169,316,676}, -9678, -2992),
                Arguments.of(new int[]{-1, 2, 1, -4}, 1, 2),
                Arguments.of(new int[]{1, 1, 1, 0}, 100, 3),
                Arguments.of(new int[]{0, 0, 0}, 1, 0),
                Arguments.of(new int[]{0, 2, 1, -3}, 1, 0)
        );
    }

    @ParameterizedTest
    @MethodSource("generateData")
    public void threeSumClosestTest(int[] nums, int target, int expected) {
        int actual = threeSumClosest.threeSumClosest(nums, target);
        assertEquals(expected, actual);
    }
}